/*
 * Copyright (C) 2017. Uber Technologies
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import net.ltgt.gradle.errorprone.CheckSeverity
buildscript {
  apply from: rootProject.file('gradle/dependencies.gradle')
  buildscript {
    repositories {
      google()
      mavenCentral()
      gradlePluginPortal()
      jcenter()
    }
    dependencies {
      classpath deps.build.gradlePlugins.android
      classpath deps.build.gradlePlugins.kotlin
      classpath "net.ltgt.gradle:gradle-errorprone-plugin:${deps.versions.errorPronePlugin}"
      classpath "net.ltgt.gradle:gradle-nullaway-plugin:${deps.versions.nullawayPlugin}"
      classpath "org.jetbrains.dokka:dokka-android-gradle-plugin:${deps.versions.dokka}"
      classpath "org.jetbrains.dokka:dokka-gradle-plugin:${deps.versions.dokka}"
      classpath "ru.vyarus:gradle-animalsniffer-plugin:${deps.versions.animalSniffer}"
      classpath "com.diffplug.spotless:spotless-plugin-gradle:${deps.versions.spotless}"
    }
  }
}

Set<String> mixedSourcesArtifacts = [
    "autodispose",
    "autodispose-android",
    "autodispose-android-archcomponents",
    "autodispose-android-archcomponents-test",
    "autodispose-lifecycle",
    "autodispose-rxlifecycle",
    "autodispose-rxlifecycle3"
]
// These are files with different copyright headers that should not be modified automatically.
String[] copiedFiles = [
    "AtomicThrowable",
    "AutoDisposableHelper",
    "AutoDisposeBackpressureHelper",
    "AutoDisposeEndConsumerHelper",
    "AutoSubscriptionHelper",
    "ExceptionHelper",
    "HalfSerializer",
].collect { "**/*${it}.java" } as String[]
subprojects {
  repositories {
    google()
    mavenCentral()
    jcenter()
    // TODO remove when RxJava and RxAndroid 3.0 are stable
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url 'https://oss.jfrog.org/libs-snapshot' }
  }

  apply from: rootProject.file('gradle/dependencies.gradle')
  apply plugin: 'com.diffplug.gradle.spotless'
  spotless {
    format 'misc', {
      target '**/*.md', '**/.gitignore'

      indentWithTabs()
      trimTrailingWhitespace()
      endWithNewline()
    }
    kotlin {
      target "**/*.kt"
      ktlint(deps.versions.ktlint).userData(['indent_size': '2', 'continuation_indent_size' : '2'])
      licenseHeaderFile rootProject.file('spotless/copyright.kt')
      trimTrailingWhitespace()
      endWithNewline()
    }
    java {
      target "**/*.java"
      targetExclude(copiedFiles)
      googleJavaFormat(deps.versions.gjf)
      licenseHeaderFile rootProject.file('spotless/copyright.java')
      removeUnusedImports()
      trimTrailingWhitespace()
      endWithNewline()
    }
    groovyGradle {
      target '**/*.gradle'
      trimTrailingWhitespace()
      endWithNewline()
    }
  }

  boolean isMixedSourceSet = project.name in mixedSourcesArtifacts
  boolean isAndroidLibrary = project.path.startsWith(":android:")
  boolean isLint = project.path.endsWith("-lint")
  boolean isKotlin = project.path.endsWith("-ktx") || isLint || isMixedSourceSet || project.path.endsWith("coroutines-interop")
  boolean isSample = project.name == "sample"
  boolean isJavaLibrary = !isAndroidLibrary && !isKotlin && !isSample || (isMixedSourceSet && !isAndroidLibrary)
  boolean usesErrorProne = !isKotlin && !isSample || isMixedSourceSet
  if (isAndroidLibrary) {
    project.apply plugin: 'com.android.library'
    project.android {
      compileSdkVersion deps.build.compileSdkVersion

      defaultConfig {
        minSdkVersion deps.build.minSdkVersion
        targetSdkVersion deps.build.targetSdkVersion
        consumerProguardFiles 'consumer-proguard-rules.txt'
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testApplicationId "com.uber.autodispose.android.lifecycle.androidTest"
      }
      compileOptions {
        sourceCompatibility deps.build.javaVersion
        targetCompatibility deps.build.javaVersion
      }
      lintOptions {
        lintConfig file('lint.xml')
      }
      testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
      }
    }
  }
  if (isKotlin) {
    if (isAndroidLibrary) {
      project.apply plugin: 'org.jetbrains.kotlin.android'
      project.apply plugin: 'org.jetbrains.dokka-android'

      project.tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
          freeCompilerArgs = [
              "-Xjsr305=strict",
              "-progressive"
          ]
          jvmTarget = "1.8"
        }
      }
    } else {
      project.apply plugin: 'org.jetbrains.kotlin.jvm'
      project.apply plugin: 'org.jetbrains.dokka'

      project.compileKotlin {
        kotlinOptions {
          freeCompilerArgs = [
              "-Xjsr305=strict",
              "-progressive"
          ]
          jvmTarget = "1.8"
        }
      }
      project.compileTestKotlin {
        kotlinOptions {
          freeCompilerArgs = [
              "-Xjsr305=strict",
              "-progressive"
          ]
          jvmTarget = "1.8"
        }
      }
    }
    // Lint must be compileOnly, mixed source sets (for now) must manually specify depending on needs
    if (!(isLint || isMixedSourceSet)) {
      project.dependencies {
        api deps.kotlin.stdlib
      }
    } else {
      // Lint or mixed source set
      project.dependencies {
        compileOnly deps.kotlin.stdlib
        testImplementation deps.kotlin.stdlib
        if (isAndroidLibrary) {
          androidTestImplementation deps.kotlin.stdlib
        }
      }
    }
  }
  if (isJavaLibrary) {
    project.apply plugin: 'java-library'
    project.sourceCompatibility = deps.build.javaVersion
    project.targetCompatibility = deps.build.javaVersion
    project.test {
      testLogging.showStandardStreams = true
    }
  }
  if (usesErrorProne) {
    project.apply plugin: 'net.ltgt.errorprone'
    project.apply plugin: 'net.ltgt.nullaway'
    project.dependencies {
      if (!JavaVersion.current().isJava9Compatible()) {
        errorproneJavac deps.build.errorProneJavac
      }
      errorprone deps.build.nullAway
      errorprone deps.build.errorProne
    }
    if (isJavaLibrary) {
      project.tasks.withType(JavaCompile).configureEach {
        options.errorprone.nullaway {
          severity = CheckSeverity.ERROR
          annotatedPackages.add("com.uber")
        }
      }
      project.tasks.withType(Test) {
        setMaxParallelForks(Runtime.runtime.availableProcessors().intdiv(2) ?: 1)
      }
    }
  }
  afterEvaluate {
    if (isAndroidLibrary && usesErrorProne) {
      def configurer = { variant ->
        variant.getJavaCompileProvider().configure {
          options.errorprone.nullaway {
            severity = CheckSeverity.ERROR
            annotatedPackages.add("com.uber")
          }
        }
      }
      project.android.libraryVariants.configureEach(configurer)
      project.android.testVariants.configureEach(configurer)
      project.android.unitTestVariants.configureEach(configurer)
    }
    if (isAndroidLibrary) {
      // TODO replace with https://issuetracker.google.com/issues/72050365 once released.
      project.android {
        libraryVariants.all {
          it.generateBuildConfigProvider.configure {
            it.enabled = false
          }
        }
        variantFilter { variant ->
          if (variant.buildType.name == 'debug') {
            variant.setIgnore(true)
          }
        }
      }
    }
  }
}

task clean(type: Delete) {
  delete rootProject.buildDir
}

apply from: 'gradle/dependencies.gradle'
apply from: 'gradle/publish-docs.gradle'
