/*
 * Copyright (C) 2017. Uber Technologies
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import net.ltgt.gradle.errorprone.CheckSeverity
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
  alias(libs.plugins.kotlin.jvm) apply false
  alias(libs.plugins.kotlin.android) apply false
  alias(libs.plugins.kotlin.kapt) apply false
  alias(libs.plugins.android.application) apply false
  alias(libs.plugins.android.library) apply false
  alias(libs.plugins.errorProne) apply false
  alias(libs.plugins.nullAway) apply false
  alias(libs.plugins.dokka) apply false
  alias(libs.plugins.animalSniffer) apply false
  alias(libs.plugins.mavenPublish) apply false
  alias(libs.plugins.spotless) apply false
  alias(libs.plugins.binaryCompatibilityValidator)
}

apiValidation {
  ignoredProjects += ["sample", "test-utils"]
}

Set<String> mixedSourcesArtifacts = [
    "autodispose",
    "autodispose-android",
    "autodispose-androidx-lifecycle",
    "autodispose-androidx-lifecycle-test",
    "autodispose-lifecycle"
]
// These are files with different copyright headers that should not be modified automatically.
String[] copiedFiles = [
    "AtomicThrowable",
    "AutoDisposableHelper",
    "AutoDisposeBackpressureHelper",
    "AutoDisposeEndConsumerHelper",
    "AutoSubscriptionHelper",
    "ExceptionHelper",
    "HalfSerializer",
].collect { "**/*${it}.java" } as String[]

subprojects {
  apply plugin: 'com.diffplug.spotless'
  spotless {
    format 'misc', {
      target '**/*.md', '**/.gitignore'

      indentWithTabs()
      trimTrailingWhitespace()
      endWithNewline()
    }
    kotlin {
      target "**/*.kt"
      ktlint(libs.versions.ktlint.get()).userData(['indent_size': '2', 'continuation_indent_size' : '2'])
      licenseHeaderFile rootProject.file('spotless/copyright.kt')
      trimTrailingWhitespace()
      endWithNewline()
    }
    java {
      target "**/*.java"
      targetExclude(copiedFiles)
      googleJavaFormat(libs.versions.gjf.get())
      licenseHeaderFile rootProject.file('spotless/copyright.java')
      removeUnusedImports()
      trimTrailingWhitespace()
      endWithNewline()
    }
    groovyGradle {
      target '**/*.gradle'
      trimTrailingWhitespace()
      endWithNewline()
    }
  }

  boolean isMixedSourceSet = project.name in mixedSourcesArtifacts
  boolean isAndroidLibrary = project.path.startsWith(":android:")
  boolean isLint = project.path.endsWith("-lint")
  boolean isKotlin = project.path.endsWith("-ktx") || isLint || isMixedSourceSet || project.path.contains("coroutines")
  boolean isSample = project.name == "sample"
  boolean isJavaLibrary = !isAndroidLibrary && !isKotlin && !isSample || (isMixedSourceSet && !isAndroidLibrary)
  boolean usesErrorProne = !isKotlin && !isSample || isMixedSourceSet
  project.pluginManager.withPlugin("java") {
    java {
      toolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
      }
    }
  }
  if (isAndroidLibrary) {
    project.apply plugin: 'com.android.library'
    project.android {
      compileSdk libs.versions.compileSdkVersion.get().toInteger()

      defaultConfig {
        minSdk libs.versions.minSdkVersion.get().toInteger()
        targetSdk libs.versions.targetSdkVersion.get().toInteger()
        consumerProguardFiles 'consumer-proguard-rules.txt'
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testApplicationId "autodispose2.android.lifecycle.androidTest"
      }
      compileOptions {
        sourceCompatibility JavaVersion.toVersion(libs.versions.jvmTarget.get())
        targetCompatibility JavaVersion.toVersion(libs.versions.jvmTarget.get())
      }
      lintOptions {
        lintConfig file('lint.xml')
      }
      testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
      }
    }
  } else if (!isSample && !isLint) {
    project.tasks.withType(JavaCompile).configureEach {
      // Cannot set JavaCompile's release flag in android projects
      options.release.set(8)
    }
  }
  if (isKotlin) {
    if (isAndroidLibrary) {
      project.apply plugin: 'org.jetbrains.kotlin.android'
      project.apply plugin: 'org.jetbrains.dokka'

      project.tasks.withType(KotlinCompile).configureEach {
        kotlinOptions {
          freeCompilerArgs = [
              "-Xjsr305=strict",
              "-progressive"
          ]
          jvmTarget = libs.versions.jvmTarget.get()
        }
      }

      project.kotlin {
        explicitApi()
      }
    } else {
      project.apply plugin: 'org.jetbrains.kotlin.jvm'
      project.apply plugin: 'org.jetbrains.dokka'

      project.compileKotlin {
        kotlinOptions {
          freeCompilerArgs = [
              "-Xjsr305=strict",
              "-progressive"
          ]
          if (isLint) {
            jvmTarget = libs.versions.lintJvmTarget.get()
          } else {
            jvmTarget = libs.versions.jvmTarget.get()
          }
        }
      }
      project.compileTestKotlin {
        kotlinOptions {
          freeCompilerArgs = [
              "-Xjsr305=strict",
              "-progressive"
          ]
          if (isLint) {
            jvmTarget = libs.versions.lintJvmTarget.get()
          } else {
            jvmTarget = libs.versions.jvmTarget.get()
          }
        }
      }
      project.kotlin {
        explicitApi()
      }
    }
    project.pluginManager.withPlugin("org.jetbrains.dokka") {
      tasks.named("dokkaGfm") {
        outputDirectory.set(rootProject.file("docs/2.x"))
        moduleName.set(project.property("POM_ARTIFACT_ID"))
        moduleVersion.set(project.property("VERSION_NAME"))
        dokkaSourceSets.configureEach {
          skipDeprecated.set(true)
          includes.from("Module.md")
          suppressGeneratedFiles.set(true)
          suppressInheritedMembers.set(true)
          externalDocumentationLink {
            url.set(new URL("http://reactivex.io/RxJava/3.x/javadoc/"))
          }
          externalDocumentationLink {
            url.set(new URL("https://kotlin.github.io/kotlinx.coroutines/index.html"))
          }
          perPackageOption {
            matchingRegex.set(/.*\.internal.*/)
            suppress.set(true)
          }
        }
      }
    }
  }
  if (isJavaLibrary) {
    project.apply plugin: 'java-library'
    if (isLint) {
      project.sourceCompatibility = JavaVersion.toVersion(libs.versions.lintJvmTarget.get())
      project.targetCompatibility = JavaVersion.toVersion(libs.versions.lintJvmTarget.get())
    } else {
      project.sourceCompatibility = JavaVersion.toVersion(libs.versions.jvmTarget.get())
      project.targetCompatibility = JavaVersion.toVersion(libs.versions.jvmTarget.get())
    }
    project.test {
      testLogging.showStandardStreams = true
    }
  }
  if (usesErrorProne) {
    project.apply plugin: 'net.ltgt.errorprone'
    project.apply plugin: 'net.ltgt.nullaway'
    project.dependencies {
      if (!JavaVersion.current().isJava9Compatible()) {
        errorproneJavac libs.build.errorProneJavac
      }
      errorprone libs.build.nullAway
      errorprone libs.build.errorProne
    }
    if (isJavaLibrary) {
      project.tasks.withType(JavaCompile).configureEach {
        options.errorprone.nullaway {
          severity = CheckSeverity.ERROR
          annotatedPackages.add("autodispose2")
        }
      }
      project.tasks.withType(Test) {
        setMaxParallelForks(Runtime.runtime.availableProcessors().intdiv(2) ?: 1)
      }
    }
  }
  afterEvaluate {
    if (isAndroidLibrary && usesErrorProne) {
      def configurer = { variant ->
        variant.getJavaCompileProvider().configure {
          options.errorprone.nullaway {
            severity = CheckSeverity.ERROR
            annotatedPackages.add("autodispose2")
          }
        }
      }
      project.android.libraryVariants.configureEach(configurer)
      project.android.testVariants.configureEach(configurer)
      project.android.unitTestVariants.configureEach(configurer)
    }
    if (isAndroidLibrary) {
      project.android {
        variantFilter { variant ->
          if (variant.buildType.name == 'debug') {
            variant.setIgnore(true)
          }
        }
      }
    }
  }
}

task clean(type: Delete) {
  delete rootProject.buildDir
}
